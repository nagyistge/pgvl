/*
 * Image.cpp is part of pgvl and is
 * Copyright 2015 Philip G. Lee <rocketman768@gmail.com>
 */

#include <Image.h>
#include <cmath>
#include <Eigen/Dense>
#include <SDL.h>

static SDL_Color grayscaleColors[] = {
   {.r = 0x00, .g = 0x00, .b = 0x00, .a = 0xFF},
   {.r = 0x01, .g = 0x01, .b = 0x01, .a = 0xFF},
   {.r = 0x02, .g = 0x02, .b = 0x02, .a = 0xFF},
   {.r = 0x03, .g = 0x03, .b = 0x03, .a = 0xFF},
   {.r = 0x04, .g = 0x04, .b = 0x04, .a = 0xFF},
   {.r = 0x05, .g = 0x05, .b = 0x05, .a = 0xFF},
   {.r = 0x06, .g = 0x06, .b = 0x06, .a = 0xFF},
   {.r = 0x07, .g = 0x07, .b = 0x07, .a = 0xFF},
   {.r = 0x08, .g = 0x08, .b = 0x08, .a = 0xFF},
   {.r = 0x09, .g = 0x09, .b = 0x09, .a = 0xFF},
   {.r = 0x0A, .g = 0x0A, .b = 0x0A, .a = 0xFF},
   {.r = 0x0B, .g = 0x0B, .b = 0x0B, .a = 0xFF},
   {.r = 0x0C, .g = 0x0C, .b = 0x0C, .a = 0xFF},
   {.r = 0x0D, .g = 0x0D, .b = 0x0D, .a = 0xFF},
   {.r = 0x0E, .g = 0x0E, .b = 0x0E, .a = 0xFF},
   {.r = 0x0F, .g = 0x0F, .b = 0x0F, .a = 0xFF},
   {.r = 0x10, .g = 0x10, .b = 0x10, .a = 0xFF},
   {.r = 0x11, .g = 0x11, .b = 0x11, .a = 0xFF},
   {.r = 0x12, .g = 0x12, .b = 0x12, .a = 0xFF},
   {.r = 0x13, .g = 0x13, .b = 0x13, .a = 0xFF},
   {.r = 0x14, .g = 0x14, .b = 0x14, .a = 0xFF},
   {.r = 0x15, .g = 0x15, .b = 0x15, .a = 0xFF},
   {.r = 0x16, .g = 0x16, .b = 0x16, .a = 0xFF},
   {.r = 0x17, .g = 0x17, .b = 0x17, .a = 0xFF},
   {.r = 0x18, .g = 0x18, .b = 0x18, .a = 0xFF},
   {.r = 0x19, .g = 0x19, .b = 0x19, .a = 0xFF},
   {.r = 0x1A, .g = 0x1A, .b = 0x1A, .a = 0xFF},
   {.r = 0x1B, .g = 0x1B, .b = 0x1B, .a = 0xFF},
   {.r = 0x1C, .g = 0x1C, .b = 0x1C, .a = 0xFF},
   {.r = 0x1D, .g = 0x1D, .b = 0x1D, .a = 0xFF},
   {.r = 0x1E, .g = 0x1E, .b = 0x1E, .a = 0xFF},
   {.r = 0x1F, .g = 0x1F, .b = 0x1F, .a = 0xFF},
   {.r = 0x20, .g = 0x20, .b = 0x20, .a = 0xFF},
   {.r = 0x21, .g = 0x21, .b = 0x21, .a = 0xFF},
   {.r = 0x22, .g = 0x22, .b = 0x22, .a = 0xFF},
   {.r = 0x23, .g = 0x23, .b = 0x23, .a = 0xFF},
   {.r = 0x24, .g = 0x24, .b = 0x24, .a = 0xFF},
   {.r = 0x25, .g = 0x25, .b = 0x25, .a = 0xFF},
   {.r = 0x26, .g = 0x26, .b = 0x26, .a = 0xFF},
   {.r = 0x27, .g = 0x27, .b = 0x27, .a = 0xFF},
   {.r = 0x28, .g = 0x28, .b = 0x28, .a = 0xFF},
   {.r = 0x29, .g = 0x29, .b = 0x29, .a = 0xFF},
   {.r = 0x2A, .g = 0x2A, .b = 0x2A, .a = 0xFF},
   {.r = 0x2B, .g = 0x2B, .b = 0x2B, .a = 0xFF},
   {.r = 0x2C, .g = 0x2C, .b = 0x2C, .a = 0xFF},
   {.r = 0x2D, .g = 0x2D, .b = 0x2D, .a = 0xFF},
   {.r = 0x2E, .g = 0x2E, .b = 0x2E, .a = 0xFF},
   {.r = 0x2F, .g = 0x2F, .b = 0x2F, .a = 0xFF},
   {.r = 0x30, .g = 0x30, .b = 0x30, .a = 0xFF},
   {.r = 0x31, .g = 0x31, .b = 0x31, .a = 0xFF},
   {.r = 0x32, .g = 0x32, .b = 0x32, .a = 0xFF},
   {.r = 0x33, .g = 0x33, .b = 0x33, .a = 0xFF},
   {.r = 0x34, .g = 0x34, .b = 0x34, .a = 0xFF},
   {.r = 0x35, .g = 0x35, .b = 0x35, .a = 0xFF},
   {.r = 0x36, .g = 0x36, .b = 0x36, .a = 0xFF},
   {.r = 0x37, .g = 0x37, .b = 0x37, .a = 0xFF},
   {.r = 0x38, .g = 0x38, .b = 0x38, .a = 0xFF},
   {.r = 0x39, .g = 0x39, .b = 0x39, .a = 0xFF},
   {.r = 0x3A, .g = 0x3A, .b = 0x3A, .a = 0xFF},
   {.r = 0x3B, .g = 0x3B, .b = 0x3B, .a = 0xFF},
   {.r = 0x3C, .g = 0x3C, .b = 0x3C, .a = 0xFF},
   {.r = 0x3D, .g = 0x3D, .b = 0x3D, .a = 0xFF},
   {.r = 0x3E, .g = 0x3E, .b = 0x3E, .a = 0xFF},
   {.r = 0x3F, .g = 0x3F, .b = 0x3F, .a = 0xFF},
   {.r = 0x40, .g = 0x40, .b = 0x40, .a = 0xFF},
   {.r = 0x41, .g = 0x41, .b = 0x41, .a = 0xFF},
   {.r = 0x42, .g = 0x42, .b = 0x42, .a = 0xFF},
   {.r = 0x43, .g = 0x43, .b = 0x43, .a = 0xFF},
   {.r = 0x44, .g = 0x44, .b = 0x44, .a = 0xFF},
   {.r = 0x45, .g = 0x45, .b = 0x45, .a = 0xFF},
   {.r = 0x46, .g = 0x46, .b = 0x46, .a = 0xFF},
   {.r = 0x47, .g = 0x47, .b = 0x47, .a = 0xFF},
   {.r = 0x48, .g = 0x48, .b = 0x48, .a = 0xFF},
   {.r = 0x49, .g = 0x49, .b = 0x49, .a = 0xFF},
   {.r = 0x4A, .g = 0x4A, .b = 0x4A, .a = 0xFF},
   {.r = 0x4B, .g = 0x4B, .b = 0x4B, .a = 0xFF},
   {.r = 0x4C, .g = 0x4C, .b = 0x4C, .a = 0xFF},
   {.r = 0x4D, .g = 0x4D, .b = 0x4D, .a = 0xFF},
   {.r = 0x4E, .g = 0x4E, .b = 0x4E, .a = 0xFF},
   {.r = 0x4F, .g = 0x4F, .b = 0x4F, .a = 0xFF},
   {.r = 0x50, .g = 0x50, .b = 0x50, .a = 0xFF},
   {.r = 0x51, .g = 0x51, .b = 0x51, .a = 0xFF},
   {.r = 0x52, .g = 0x52, .b = 0x52, .a = 0xFF},
   {.r = 0x53, .g = 0x53, .b = 0x53, .a = 0xFF},
   {.r = 0x54, .g = 0x54, .b = 0x54, .a = 0xFF},
   {.r = 0x55, .g = 0x55, .b = 0x55, .a = 0xFF},
   {.r = 0x56, .g = 0x56, .b = 0x56, .a = 0xFF},
   {.r = 0x57, .g = 0x57, .b = 0x57, .a = 0xFF},
   {.r = 0x58, .g = 0x58, .b = 0x58, .a = 0xFF},
   {.r = 0x59, .g = 0x59, .b = 0x59, .a = 0xFF},
   {.r = 0x5A, .g = 0x5A, .b = 0x5A, .a = 0xFF},
   {.r = 0x5B, .g = 0x5B, .b = 0x5B, .a = 0xFF},
   {.r = 0x5C, .g = 0x5C, .b = 0x5C, .a = 0xFF},
   {.r = 0x5D, .g = 0x5D, .b = 0x5D, .a = 0xFF},
   {.r = 0x5E, .g = 0x5E, .b = 0x5E, .a = 0xFF},
   {.r = 0x5F, .g = 0x5F, .b = 0x5F, .a = 0xFF},
   {.r = 0x60, .g = 0x60, .b = 0x60, .a = 0xFF},
   {.r = 0x61, .g = 0x61, .b = 0x61, .a = 0xFF},
   {.r = 0x62, .g = 0x62, .b = 0x62, .a = 0xFF},
   {.r = 0x63, .g = 0x63, .b = 0x63, .a = 0xFF},
   {.r = 0x64, .g = 0x64, .b = 0x64, .a = 0xFF},
   {.r = 0x65, .g = 0x65, .b = 0x65, .a = 0xFF},
   {.r = 0x66, .g = 0x66, .b = 0x66, .a = 0xFF},
   {.r = 0x67, .g = 0x67, .b = 0x67, .a = 0xFF},
   {.r = 0x68, .g = 0x68, .b = 0x68, .a = 0xFF},
   {.r = 0x69, .g = 0x69, .b = 0x69, .a = 0xFF},
   {.r = 0x6A, .g = 0x6A, .b = 0x6A, .a = 0xFF},
   {.r = 0x6B, .g = 0x6B, .b = 0x6B, .a = 0xFF},
   {.r = 0x6C, .g = 0x6C, .b = 0x6C, .a = 0xFF},
   {.r = 0x6D, .g = 0x6D, .b = 0x6D, .a = 0xFF},
   {.r = 0x6E, .g = 0x6E, .b = 0x6E, .a = 0xFF},
   {.r = 0x6F, .g = 0x6F, .b = 0x6F, .a = 0xFF},
   {.r = 0x70, .g = 0x70, .b = 0x70, .a = 0xFF},
   {.r = 0x71, .g = 0x71, .b = 0x71, .a = 0xFF},
   {.r = 0x72, .g = 0x72, .b = 0x72, .a = 0xFF},
   {.r = 0x73, .g = 0x73, .b = 0x73, .a = 0xFF},
   {.r = 0x74, .g = 0x74, .b = 0x74, .a = 0xFF},
   {.r = 0x75, .g = 0x75, .b = 0x75, .a = 0xFF},
   {.r = 0x76, .g = 0x76, .b = 0x76, .a = 0xFF},
   {.r = 0x77, .g = 0x77, .b = 0x77, .a = 0xFF},
   {.r = 0x78, .g = 0x78, .b = 0x78, .a = 0xFF},
   {.r = 0x79, .g = 0x79, .b = 0x79, .a = 0xFF},
   {.r = 0x7A, .g = 0x7A, .b = 0x7A, .a = 0xFF},
   {.r = 0x7B, .g = 0x7B, .b = 0x7B, .a = 0xFF},
   {.r = 0x7C, .g = 0x7C, .b = 0x7C, .a = 0xFF},
   {.r = 0x7D, .g = 0x7D, .b = 0x7D, .a = 0xFF},
   {.r = 0x7E, .g = 0x7E, .b = 0x7E, .a = 0xFF},
   {.r = 0x7F, .g = 0x7F, .b = 0x7F, .a = 0xFF},
   {.r = 0x80, .g = 0x80, .b = 0x80, .a = 0xFF},
   {.r = 0x81, .g = 0x81, .b = 0x81, .a = 0xFF},
   {.r = 0x82, .g = 0x82, .b = 0x82, .a = 0xFF},
   {.r = 0x83, .g = 0x83, .b = 0x83, .a = 0xFF},
   {.r = 0x84, .g = 0x84, .b = 0x84, .a = 0xFF},
   {.r = 0x85, .g = 0x85, .b = 0x85, .a = 0xFF},
   {.r = 0x86, .g = 0x86, .b = 0x86, .a = 0xFF},
   {.r = 0x87, .g = 0x87, .b = 0x87, .a = 0xFF},
   {.r = 0x88, .g = 0x88, .b = 0x88, .a = 0xFF},
   {.r = 0x89, .g = 0x89, .b = 0x89, .a = 0xFF},
   {.r = 0x8A, .g = 0x8A, .b = 0x8A, .a = 0xFF},
   {.r = 0x8B, .g = 0x8B, .b = 0x8B, .a = 0xFF},
   {.r = 0x8C, .g = 0x8C, .b = 0x8C, .a = 0xFF},
   {.r = 0x8D, .g = 0x8D, .b = 0x8D, .a = 0xFF},
   {.r = 0x8E, .g = 0x8E, .b = 0x8E, .a = 0xFF},
   {.r = 0x8F, .g = 0x8F, .b = 0x8F, .a = 0xFF},
   {.r = 0x90, .g = 0x90, .b = 0x90, .a = 0xFF},
   {.r = 0x91, .g = 0x91, .b = 0x91, .a = 0xFF},
   {.r = 0x92, .g = 0x92, .b = 0x92, .a = 0xFF},
   {.r = 0x93, .g = 0x93, .b = 0x93, .a = 0xFF},
   {.r = 0x94, .g = 0x94, .b = 0x94, .a = 0xFF},
   {.r = 0x95, .g = 0x95, .b = 0x95, .a = 0xFF},
   {.r = 0x96, .g = 0x96, .b = 0x96, .a = 0xFF},
   {.r = 0x97, .g = 0x97, .b = 0x97, .a = 0xFF},
   {.r = 0x98, .g = 0x98, .b = 0x98, .a = 0xFF},
   {.r = 0x99, .g = 0x99, .b = 0x99, .a = 0xFF},
   {.r = 0x9A, .g = 0x9A, .b = 0x9A, .a = 0xFF},
   {.r = 0x9B, .g = 0x9B, .b = 0x9B, .a = 0xFF},
   {.r = 0x9C, .g = 0x9C, .b = 0x9C, .a = 0xFF},
   {.r = 0x9D, .g = 0x9D, .b = 0x9D, .a = 0xFF},
   {.r = 0x9E, .g = 0x9E, .b = 0x9E, .a = 0xFF},
   {.r = 0x9F, .g = 0x9F, .b = 0x9F, .a = 0xFF},
   {.r = 0xA0, .g = 0xA0, .b = 0xA0, .a = 0xFF},
   {.r = 0xA1, .g = 0xA1, .b = 0xA1, .a = 0xFF},
   {.r = 0xA2, .g = 0xA2, .b = 0xA2, .a = 0xFF},
   {.r = 0xA3, .g = 0xA3, .b = 0xA3, .a = 0xFF},
   {.r = 0xA4, .g = 0xA4, .b = 0xA4, .a = 0xFF},
   {.r = 0xA5, .g = 0xA5, .b = 0xA5, .a = 0xFF},
   {.r = 0xA6, .g = 0xA6, .b = 0xA6, .a = 0xFF},
   {.r = 0xA7, .g = 0xA7, .b = 0xA7, .a = 0xFF},
   {.r = 0xA8, .g = 0xA8, .b = 0xA8, .a = 0xFF},
   {.r = 0xA9, .g = 0xA9, .b = 0xA9, .a = 0xFF},
   {.r = 0xAA, .g = 0xAA, .b = 0xAA, .a = 0xFF},
   {.r = 0xAB, .g = 0xAB, .b = 0xAB, .a = 0xFF},
   {.r = 0xAC, .g = 0xAC, .b = 0xAC, .a = 0xFF},
   {.r = 0xAD, .g = 0xAD, .b = 0xAD, .a = 0xFF},
   {.r = 0xAE, .g = 0xAE, .b = 0xAE, .a = 0xFF},
   {.r = 0xAF, .g = 0xAF, .b = 0xAF, .a = 0xFF},
   {.r = 0xB0, .g = 0xB0, .b = 0xB0, .a = 0xFF},
   {.r = 0xB1, .g = 0xB1, .b = 0xB1, .a = 0xFF},
   {.r = 0xB2, .g = 0xB2, .b = 0xB2, .a = 0xFF},
   {.r = 0xB3, .g = 0xB3, .b = 0xB3, .a = 0xFF},
   {.r = 0xB4, .g = 0xB4, .b = 0xB4, .a = 0xFF},
   {.r = 0xB5, .g = 0xB5, .b = 0xB5, .a = 0xFF},
   {.r = 0xB6, .g = 0xB6, .b = 0xB6, .a = 0xFF},
   {.r = 0xB7, .g = 0xB7, .b = 0xB7, .a = 0xFF},
   {.r = 0xB8, .g = 0xB8, .b = 0xB8, .a = 0xFF},
   {.r = 0xB9, .g = 0xB9, .b = 0xB9, .a = 0xFF},
   {.r = 0xBA, .g = 0xBA, .b = 0xBA, .a = 0xFF},
   {.r = 0xBB, .g = 0xBB, .b = 0xBB, .a = 0xFF},
   {.r = 0xBC, .g = 0xBC, .b = 0xBC, .a = 0xFF},
   {.r = 0xBD, .g = 0xBD, .b = 0xBD, .a = 0xFF},
   {.r = 0xBE, .g = 0xBE, .b = 0xBE, .a = 0xFF},
   {.r = 0xBF, .g = 0xBF, .b = 0xBF, .a = 0xFF},
   {.r = 0xC0, .g = 0xC0, .b = 0xC0, .a = 0xFF},
   {.r = 0xC1, .g = 0xC1, .b = 0xC1, .a = 0xFF},
   {.r = 0xC2, .g = 0xC2, .b = 0xC2, .a = 0xFF},
   {.r = 0xC3, .g = 0xC3, .b = 0xC3, .a = 0xFF},
   {.r = 0xC4, .g = 0xC4, .b = 0xC4, .a = 0xFF},
   {.r = 0xC5, .g = 0xC5, .b = 0xC5, .a = 0xFF},
   {.r = 0xC6, .g = 0xC6, .b = 0xC6, .a = 0xFF},
   {.r = 0xC7, .g = 0xC7, .b = 0xC7, .a = 0xFF},
   {.r = 0xC8, .g = 0xC8, .b = 0xC8, .a = 0xFF},
   {.r = 0xC9, .g = 0xC9, .b = 0xC9, .a = 0xFF},
   {.r = 0xCA, .g = 0xCA, .b = 0xCA, .a = 0xFF},
   {.r = 0xCB, .g = 0xCB, .b = 0xCB, .a = 0xFF},
   {.r = 0xCC, .g = 0xCC, .b = 0xCC, .a = 0xFF},
   {.r = 0xCD, .g = 0xCD, .b = 0xCD, .a = 0xFF},
   {.r = 0xCE, .g = 0xCE, .b = 0xCE, .a = 0xFF},
   {.r = 0xCF, .g = 0xCF, .b = 0xCF, .a = 0xFF},
   {.r = 0xD0, .g = 0xD0, .b = 0xD0, .a = 0xFF},
   {.r = 0xD1, .g = 0xD1, .b = 0xD1, .a = 0xFF},
   {.r = 0xD2, .g = 0xD2, .b = 0xD2, .a = 0xFF},
   {.r = 0xD3, .g = 0xD3, .b = 0xD3, .a = 0xFF},
   {.r = 0xD4, .g = 0xD4, .b = 0xD4, .a = 0xFF},
   {.r = 0xD5, .g = 0xD5, .b = 0xD5, .a = 0xFF},
   {.r = 0xD6, .g = 0xD6, .b = 0xD6, .a = 0xFF},
   {.r = 0xD7, .g = 0xD7, .b = 0xD7, .a = 0xFF},
   {.r = 0xD8, .g = 0xD8, .b = 0xD8, .a = 0xFF},
   {.r = 0xD9, .g = 0xD9, .b = 0xD9, .a = 0xFF},
   {.r = 0xDA, .g = 0xDA, .b = 0xDA, .a = 0xFF},
   {.r = 0xDB, .g = 0xDB, .b = 0xDB, .a = 0xFF},
   {.r = 0xDC, .g = 0xDC, .b = 0xDC, .a = 0xFF},
   {.r = 0xDD, .g = 0xDD, .b = 0xDD, .a = 0xFF},
   {.r = 0xDE, .g = 0xDE, .b = 0xDE, .a = 0xFF},
   {.r = 0xDF, .g = 0xDF, .b = 0xDF, .a = 0xFF},
   {.r = 0xE0, .g = 0xE0, .b = 0xE0, .a = 0xFF},
   {.r = 0xE1, .g = 0xE1, .b = 0xE1, .a = 0xFF},
   {.r = 0xE2, .g = 0xE2, .b = 0xE2, .a = 0xFF},
   {.r = 0xE3, .g = 0xE3, .b = 0xE3, .a = 0xFF},
   {.r = 0xE4, .g = 0xE4, .b = 0xE4, .a = 0xFF},
   {.r = 0xE5, .g = 0xE5, .b = 0xE5, .a = 0xFF},
   {.r = 0xE6, .g = 0xE6, .b = 0xE6, .a = 0xFF},
   {.r = 0xE7, .g = 0xE7, .b = 0xE7, .a = 0xFF},
   {.r = 0xE8, .g = 0xE8, .b = 0xE8, .a = 0xFF},
   {.r = 0xE9, .g = 0xE9, .b = 0xE9, .a = 0xFF},
   {.r = 0xEA, .g = 0xEA, .b = 0xEA, .a = 0xFF},
   {.r = 0xEB, .g = 0xEB, .b = 0xEB, .a = 0xFF},
   {.r = 0xEC, .g = 0xEC, .b = 0xEC, .a = 0xFF},
   {.r = 0xED, .g = 0xED, .b = 0xED, .a = 0xFF},
   {.r = 0xEE, .g = 0xEE, .b = 0xEE, .a = 0xFF},
   {.r = 0xEF, .g = 0xEF, .b = 0xEF, .a = 0xFF},
   {.r = 0xF0, .g = 0xF0, .b = 0xF0, .a = 0xFF},
   {.r = 0xF1, .g = 0xF1, .b = 0xF1, .a = 0xFF},
   {.r = 0xF2, .g = 0xF2, .b = 0xF2, .a = 0xFF},
   {.r = 0xF3, .g = 0xF3, .b = 0xF3, .a = 0xFF},
   {.r = 0xF4, .g = 0xF4, .b = 0xF4, .a = 0xFF},
   {.r = 0xF5, .g = 0xF5, .b = 0xF5, .a = 0xFF},
   {.r = 0xF6, .g = 0xF6, .b = 0xF6, .a = 0xFF},
   {.r = 0xF7, .g = 0xF7, .b = 0xF7, .a = 0xFF},
   {.r = 0xF8, .g = 0xF8, .b = 0xF8, .a = 0xFF},
   {.r = 0xF9, .g = 0xF9, .b = 0xF9, .a = 0xFF},
   {.r = 0xFA, .g = 0xFA, .b = 0xFA, .a = 0xFF},
   {.r = 0xFB, .g = 0xFB, .b = 0xFB, .a = 0xFF},
   {.r = 0xFC, .g = 0xFC, .b = 0xFC, .a = 0xFF},
   {.r = 0xFD, .g = 0xFD, .b = 0xFD, .a = 0xFF},
   {.r = 0xFE, .g = 0xFE, .b = 0xFE, .a = 0xFF},
   {.r = 0xFF, .g = 0xFF, .b = 0xFF, .a = 0xFF},
};

SDL_Surface* toSurface(Image<uint8_t>& img) {

   SDL_Surface* ret;

   ret = SDL_CreateRGBSurfaceFrom(
      img[0],
      img.cols(),
      img.rows(),
      8*img.channels(),
      img.rowWidth(),
      img.channels() == 3 ? 0x0000FF : 0,
      img.channels() == 3 ? 0x00FF00 : 0,
      img.channels() == 3 ? 0xFF0000 : 0,
      0
   );

   if( !ret ) {
      LOGE(SDL_GetError());
      return ret;
   }

   if( img.channels() && ret->format && ret->format->palette ) {
      SDL_SetPaletteColors(
         ret->format->palette,
         grayscaleColors,
         0,
         sizeof(grayscaleColors)/sizeof(grayscaleColors[0])
      );
   }

   return ret;
}

void srgb2rgb(Image<float>& img) {
   int const rows = img.rows();
   int const cols = img.cols();
   int const chans = img.channels();

   auto convert = [](float& c) -> void {
      if( c <= 0.04045f )
         c /= 12.92f;
      else
         c = powf((c+0.055f)/(1.f+0.055f), 2.4f);
   };

   for(int i = 0; i < rows; ++i) {
      for(int j = 0; j < cols; ++j) {
         for(int k = 0; k < chans; ++k) {
            convert(img[i][j*chans+k]);
         }
      }
   }
}

void rgb2srgb(Image<float>& img) {
   int const rows = img.rows();
   int const cols = img.cols();
   int const chans = img.channels();

   auto convert = [](float& c) -> void {
      if( c <= 0.0031308f )
         c *= 12.92f;
      else
         c = (1.f+0.055f)*powf(c, 1.f/2.4f) - 0.055f;
   };

   for(int i = 0; i < rows; ++i) {
      for(int j = 0; j < cols; ++j) {
         for(int k = 0; k < chans; ++k) {
            convert(img[i][j*chans+k]);
         }
      }
   }
}

void rgb2xyz(Image<float>& img) {
   int const rows = img.rows();
   int const cols = img.cols();
   int const chans = img.channels();
   Eigen::Vector3f rgb;
   Eigen::Vector3f xyz;
   Eigen::Matrix3f A;

   A << 0.49f, 0.31f, 0.20f, 0.17697f, 0.81240f, 0.01063f, 0.00f, 0.01f, 0.99f;
   A /= A(1,0);

   for(int i = 0; i < rows; ++i) {
      for(int j = 0; j < cols; ++j) {
         rgb(0) = img[i][j*chans+0];
         rgb(1) = img[i][j*chans+1];
         rgb(2) = img[i][j*chans+2];

         xyz = A*rgb;
         img[i][j*chans+0] = xyz(0);
         img[i][j*chans+1] = xyz(1);
         img[i][j*chans+2] = xyz(2);
      }
   }
}

void xyz2rgb(Image<float>& img) {
   int const rows = img.rows();
   int const cols = img.cols();
   int const chans = img.channels();
   Eigen::Vector3f rgb;
   Eigen::Vector3f xyz;
   Eigen::Matrix3f A;

   // This is the rgb->xyz matrix. Need its inverse.
   A << 0.49f, 0.31f, 0.20f, 0.17697f, 0.81240f, 0.01063f, 0.00f, 0.01f, 0.99f;
   A /= A(1,0);

   A = A.inverse();

   for(int i = 0; i < rows; ++i) {
      for(int j = 0; j < cols; ++j) {
         xyz(0) = img[i][j*chans+0];
         xyz(1) = img[i][j*chans+1];
         xyz(2) = img[i][j*chans+2];

         rgb = A*xyz;
         img[i][j*chans+0] = rgb(0);
         img[i][j*chans+1] = rgb(1);
         img[i][j*chans+2] = rgb(2);
      }
   }
}

void rgb2hsl(Image<float>& img) {
   float r,g,b;
   float vmax, vmin;
   float h,s,l;

   int const rows = img.rows();
   int const cols = img.cols();
   int const chans = img.channels();

   for(int i = 0; i < rows; ++i) {
      for(int j = 0; j < cols; ++j) {
         r = img[i][j*chans+0];
         g = img[i][j*chans+1];
         b = img[i][j*chans+2];

         vmax = std::max(r,std::max(g,b));
         vmin = std::min(r,std::min(g,b));
         l = (vmax+vmin)/2.f;

         if( l < 0.5 )
            s = (vmax-vmin)/(vmax+vmin);
         else
            s = (vmax-vmin)/(2.f-(vmax+vmin));

         if( vmax == r ) {
            h = 60.f*(g-b)/s;
         } else if( vmax == g ) {
            h = 120.f+60.f*(b-r)/s;
         } else {
            h = 240.f+60.f*(r-g)/s;
         }

         if( h < 0.f )
            h += 360.f;

         img[i][j*chans+0] = h;
         img[i][j*chans+1] = s;
         img[i][j*chans+2] = l;
      }
   }
}

void hsl2rgb(Image<float>& img) {
   float r,g,b;
   float h,s,l;
   float c, x, m;

   int const rows = img.rows();
   int const cols = img.cols();
   int const chans = img.channels();

   for(int i = 0; i < rows; ++i) {
      for(int j = 0; j < cols; ++j) {
         h = img[i][j*chans+0];
         s = img[i][j*chans+1];
         l = img[i][j*chans+2];

         c = (1.f - std::abs(2*l-1))*s;
         x = (1.f - std::abs(fmod(h/60.f,2.f) - 1.f))*c;
         m = l - c/2.f;

         r = g = b = m;

         if( h < 60.f ) {
            r += c;
            g += x;
         } else if( h < 120.f ) {
            r += x;
            g += c;
         } else if( h < 180.f ) {
            g += c;
            b += x;
         } else if( h < 240.f ) {
            g += x;
            b += c;
         } else if( h < 300.f ) {
            r += x;
            b += c;
         } else {
            r += c;
            b += x;
         }

         img[i][j*chans+0] = r;
         img[i][j*chans+1] = g;
         img[i][j*chans+2] = b;
      }
   }
}

void rgb2hsv(Image<float>& img) {
   float r,g,b;
   float h,s,v;

   int const rows = img.rows();
   int const cols = img.cols();
   int const chans = img.channels();

   for(int i = 0; i < rows; ++i) {
      for(int j = 0; j < cols; ++j) {
         r = img[i][j*chans+0];
         g = img[i][j*chans+1];
         b = img[i][j*chans+2];

         v = std::max(r,std::max(g,b));
         if( v < 1e-5 )
            s = 0;
         else
            s = (v - std::min(r,std::min(g,b))) / v;

         if( v == r ) {
            h = 60.f*(g-b)/(v - std::min(r,std::min(g,b)));
         } else if( v == g ) {
            h = 120.f+60.f*(b-r)/(v - std::min(r,std::min(g,b)));
         } else {
            h = 240.f+60.f*(r-g)/(v - std::min(r,std::min(g,b)));
         }

         if( h < 0.f )
            h += 360.f;

         img[i][j*chans+0] = h;
         img[i][j*chans+1] = s;
         img[i][j*chans+2] = v;
      }
   }
}

void hsv2rgb(Image<float>& img) {
   float r,g,b;
   float h,s,v;
   float c, x, m;

   int const rows = img.rows();
   int const cols = img.cols();
   int const chans = img.channels();

   for(int i = 0; i < rows; ++i) {
      for(int j = 0; j < cols; ++j) {
         h = img[i][j*chans+0];
         s = img[i][j*chans+1];
         v = img[i][j*chans+2];

         c = v*s;
         x = (1.f - std::abs(fmod(h/60.f,2.f) - 1.f))*c;
         m = v-c;

         r = g = b = m;

         if( h < 60.f ) {
            r += c;
            g += x;
         } else if( h < 120.f ) {
            r += x;
            g += c;
         } else if( h < 180.f ) {
            g += c;
            b += x;
         } else if( h < 240.f ) {
            g += x;
            b += c;
         } else if( h < 300.f ) {
            r += x;
            b += c;
         } else {
            r += c;
            b += x;
         }

         img[i][j*chans+0] = r;
         img[i][j*chans+1] = g;
         img[i][j*chans+2] = b;
      }
   }
}
